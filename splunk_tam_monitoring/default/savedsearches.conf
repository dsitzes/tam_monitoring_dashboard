[Storage Utilization Forecaster Collector]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 1
alert.track = 0
cron_schedule = 0 * * * *
dispatch.earliest_time = -30m@m
dispatch.latest_time = now
display.events.type = raw
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = true
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = | rest splunk_server=local services/cluster_blaster_indexes/sh_indexes_manager \
| rename title as indexName \
| rename archiver.coldStorageRetentionPeriod as ddaa_retention_period, frozenTimePeriodInSecs as ddas_retention_period \
| where disabled=0 \
| where totalEventCount>0 \
| eval duration_days=(maxTime-minTime)/(60*60*24) \
| convert ctime(*Time) as *Time \
| eval ddas_retention_period=ddas_retention_period/(60*60*24) \
| eval index_total_ddas_usage_gb=totalRawSizeMB/1024 \
| eval duration_days=if(duration_days>=ddas_retention_period,ddas_retention_period,duration_days) \
| eval avg_gb_storage_per_day=index_total_ddas_usage_gb/duration_days \
| table indexName,ddas_retention_period,ddaa_retention_period,duration_days,index_total_ddas_usage_gb,avg_gb_storage_per_day \
| fillnull value=0 \
| eval _time=now() \
| eval ddaa_retention_period_days=if(isnull(ddaa_retention_period),0,if(ddaa_retention_period>=ddas_retention_period,ddaa_retention_period-ddas_retention_period,0)) \
| eval forecasted_ddas_usage_gb=avg_gb_storage_per_day*ddas_retention_period \
| eval forecasted_ddaa_usage_gb=avg_gb_storage_per_day*ddaa_retention_period_days \
| appendcols \
    [| search (index=_cmc_summary OR index=summary) source="splunk-storage-summary" earliest=-24h latest=now() \
    | fields activeArchiveLicenseGB activeStorageLicenseGB rawSizeBytes rawSizeBytesCustomer rawSizeGBCustomer DDAARestoreAllowance DDAARestoreLimitGB rawSizeGBDDAARestoredTotal \
    | stats latest(activeArchiveLicenseGB) as ddaa_license_gb, latest(activeStorageLicenseGB) as ddas_license_gb] \
| filldown ddaa_license_gb \
| filldown ddas_license_gb \
| eval index_forecast_perc_ddas_utilization=100*(forecasted_ddas_usage_gb/ddas_license_gb) \
| eval index_forecast_perc_ddaa_utilization=100*(forecasted_ddaa_usage_gb/ddaa_license_gb) \
| eventstats sum(forecasted_ddas_usage_gb) as total_forecasted_ddas_usage_gb sum(forecasted_ddaa_usage_gb) as total_forecasted_ddaa_usage_gb \
| eval total_forecast_perc_ddas_utilization=100*(total_forecasted_ddas_usage_gb/ddas_license_gb) \
| eval total_forecast_perc_ddaa_utilization=100*(total_forecasted_ddaa_usage_gb/ddaa_license_gb) \
| table _time,indexName,avg_gb_storage_per_day,duration_days,ddas_retention_period,forecasted_ddas_usage_gb,ddas_license_gb,index_forecast_perc_ddas_utilization,ddaa_retention_period,forecasted_ddaa_usage_gb,ddaa_license_gb,index_forecast_perc_ddaa_utilization,total_forecasted_ddas_usage_gb,total_forecast_perc_ddas_utilization,total_forecasted_ddaa_usage_gb,total_forecast_perc_ddaa_utilization \
| stats max(total_forecasted_ddas_usage_gb) as total_forecasted_ddas_usage_gb max(total_forecast_perc_ddas_utilization) as total_forecast_perc_ddas_utilization max(total_forecasted_ddaa_usage_gb) as total_forecasted_ddaa_usage_gb max(total_forecast_perc_ddaa_utilization) as total_forecast_perc_ddaa_utilization \
| collect index=_internal sourcetype="storage_utilization_forecaster"

[Ingestion Usage Collector]
action.email.useNSSubject = 1
action.webhook.enable_allowlist = 1
alert.track = 0
cron_schedule = 0 3 * * *
dispatch.earliest_time = -30m@m
dispatch.latest_time = now
display.events.type = raw
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = true
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = index=_internal sourcetype=splunkd source="*license_usage*" type=usage earliest=-1d@d latest=-0d@d \
| fields idx h s st b \
| bin span=1d _time \
| stats sum(b) AS ingested_bytes by _time idx,st \
| table _time,idx,st,ingested_bytes \
| collect index=_internal sourcetype="ingestion_usage"